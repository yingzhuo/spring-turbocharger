pluginManagement {
	repositories {

		if (providers.gradleProperty('useMavenLocalRepository').getOrElse('true').equalsIgnoreCase('true')) {
			mavenLocal()
		}

		gradlePluginPortal()
		mavenCentral()

		if (providers.gradleProperty('useSpringMavenRepositoryMirrors').getOrElse('true').equalsIgnoreCase('true')) {
			maven { url = 'https://repo.spring.io/release' }
			maven { url = 'https://repo.spring.io/milestone' }
			maven { url = 'https://repo.spring.io/snapshot' }
		}
	}
}

plugins {
	id 'io.spring.dependency-management' version "$dependencyManagementPluginVersion" apply false
	id 'io.gitee.pkmer.pkmerboot-central-publisher' version "$mavenCentralPublisherPluginVersion" apply false
	id 'com.gorylenko.gradle-git-properties' version "$gitPluginVersion" apply false
	id 'com.github.hierynomus.license' version "$licensePluginVersion" apply false
}

dependencyResolutionManagement {
	repositories {

		if (providers.gradleProperty('useMavenLocalRepository').getOrElse('true').equalsIgnoreCase('true')) {
			mavenLocal()
		}

		if (providers.gradleProperty('useChinaMavenRepositoryMirrors').getOrElse('true').equalsIgnoreCase('true')) {
			maven { url = 'https://maven.aliyun.com/repository/public/' }
			maven { url = 'https://mirrors.cloud.tencent.com/nexus/repository/maven-public/' }
			maven { url = 'https://repo.huaweicloud.com/repository/maven/' }
			maven { url = 'https://maven.jdcloud.com/repos/content/groups/public/' }
			maven { url = 'https://mirrors.163.com/maven/repository/maven-public/' }
		}

		mavenCentral()
		gradlePluginPortal()

		if (providers.gradleProperty('useSpringMavenRepositoryMirrors').getOrElse('true').equalsIgnoreCase('true')) {
			maven { url = 'https://repo.spring.io/release' }
			maven { url = 'https://repo.spring.io/milestone' }
			maven { url = 'https://repo.spring.io/snapshot' }
		}
	}

	repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS
}

rootProject.name = 'spring-turbocharger'

['projects-main', 'projects-example'].each {
	file(it).eachDir { projectDir ->
		if (projectDir.directory && new File(projectDir, 'build.gradle').exists()) {
			include "$it:${projectDir.name}"
		}
	}
}
