/*
 *
 * Copyright 2022-present the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
	id 'java'
	id 'java-library'
	id 'io.spring.dependency-management'
}

java {
	var javaVersionInt = jdkVersion as Integer
	sourceCompatibility = JavaVersion.toVersion(javaVersionInt)
	targetCompatibility = JavaVersion.toVersion(javaVersionInt)

	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersionInt)
		vendor = JvmVendorSpec.ORACLE
		implementation = JvmImplementation.VENDOR_SPECIFIC
	}

	withSourcesJar()
	withJavadocJar()
}

compileJava {
	options.compilerArgs += [
		'-parameters',
		'-Xlint:unchecked',
		'-Xlint:cast',
		'-Xlint:rawtypes',
		'-Xlint:overloads',
		'-Xlint:divzero',
		'-Xlint:finally',
		'-Xlint:static',
		// '-Werror',
	]
}

jar {
	manifest {
		attributes([
			'Module-Name'           : project.name,
			'Implementation-Version': project.version,
			'Build-Jdk-Spec'        : jdkVersion
		])
	}
}

sourcesJar {
}

javadoc {
	failOnError = false

	options {
		locale = 'en_US'
		encoding = 'UTF-8'
		addBooleanOption("html5", true)
		addBooleanOption("Xdoclint:none", true)
	}
}

processResources {
	from(rootDir) {
		include('LICENSE.txt', 'NOTICE.txt')
		into 'META-INF'
	}

	exclude('**/.DS_Store', '**/.gitkeep', '.gitignore')
}

processTestResources {
	exclude('**/.DS_Store', '**/.gitkeep', '.gitignore')
}

test {
	useJUnitPlatform()
}
