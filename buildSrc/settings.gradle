pluginManagement {
	repositories {
		mavenLocal()

		if (providers.gradleProperty('useChinaMavenRepositoryMirrors').getOrElse('true').toBoolean()) {
			maven { url = uri('https://maven.aliyun.com/repository/gradle-plugin') }
			maven { url = uri('https://maven.aliyun.com/repository/spring-plugin') }
		}

		gradlePluginPortal()
		mavenCentral()

		if (providers.gradleProperty('useSpringMavenRepositoryMirrors').getOrElse('true').toBoolean()) {
			maven { url = uri('https://repo.spring.io/release') }
			maven { url = uri('https://repo.spring.io/milestone') }
			maven { url = uri('https://repo.spring.io/snapshot') }
		}
	}
}

dependencyResolutionManagement {
	versionCatalogs {
		create('libs', { from(files('../gradle/libs.versions.toml')) })
	}

	repositories {
		mavenLocal()

		if (providers.gradleProperty('useChinaMavenRepositoryMirrors').getOrElse('true').toBoolean()) {
			maven { url = uri('https://maven.aliyun.com/repository/public/') }
			maven { url = uri('https://mirrors.cloud.tencent.com/nexus/repository/maven-public/') }
			maven { url = uri('https://repo.huaweicloud.com/repository/maven/') }
			maven { url = uri('https://maven.jdcloud.com/repos/content/groups/public/') }
			maven { url = uri('https://mirrors.163.com/maven/repository/maven-public/') }
		}

		mavenCentral()
		gradlePluginPortal()

		if (providers.gradleProperty('useSpringMavenRepositoryMirrors').getOrElse('true').toBoolean()) {
			maven { url = uri('https://repo.spring.io/release') }
			maven { url = uri('https://repo.spring.io/milestone') }
			maven { url = uri('https://repo.spring.io/snapshot') }
		}

		google()
	}

	repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS
}
